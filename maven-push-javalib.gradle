apply plugin: 'maven'

install {
    repositories.mavenInstaller {
        pom.project {
            group GROUP_MAVEN_PUSH
            artifactId POM_ARTIFACT_ID
            version VERSION_NAME
        }
    }
}

def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}

def getOutputDir() {
  if (isReleaseBuild()) {
      return "${project.buildDir}/releases"
  } else {
      return "${project.buildDir}/snapshots"
  }
}

def getDestUrl() {
  if (isReleaseBuild()) {
      return "s3://plensee-maven/android/releases"
  } else {
      return "s3://plensee-maven/android/snapshots"
  }
}
afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                repository(url: "file:///" + getOutputDir()) //can also be used to copy to local file
                //repository(url: getDestUrl()) // for copying directly to S3

                pom.groupId = GROUP_MAVEN_PUSH
                pom.artifactId = POM_ARTIFACT_ID
                pom.version = VERSION_NAME

                pom.project {
                    name POM_NAME
                    packaging POM_PACKAGING
                    description POM_DESCRIPTION
                }
            }
        }
    }
    task sourcesJar(type: Jar, dependsOn:classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn:javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    task kotlinJavadocJar(type: Jar, dependsOn:javadoc) {
        classifier = 'javadoc'
        from "$buildDir/javadoc"
    }


    artifacts {
        archives sourcesJar
        archives kotlinJavadocJar
    }

    task copyToS3(type: Exec) {
        commandLine 'aws', 's3', 'cp', '--recursive', getOutputDir(), getDestUrl()
    }

    copyToS3.dependsOn uploadArchives
}
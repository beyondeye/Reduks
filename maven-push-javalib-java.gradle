// maven publish configuration of a java (non-android) library

// see https://docs.gradle.org/current/userguide/publishing_maven.html
// see https://docs.gradle.org/current/userguide/publishing_setup.html#sec:basic_publishing
// see https://docs.gradle.org/current/userguide/publishing_customization.html#sec:publishing_custom_artifacts_to_maven


//apply plugin: 'com.github.dcendents.android-maven'

apply plugin: 'maven-publish'



def isReleaseBuild() {
    return !VERSION_NAME.contains("SNAPSHOT")
}

def getOutputDir() {
  if (isReleaseBuild()) {
      return "${project.buildDir}/releases"
  } else {
      return "${project.buildDir}/snapshots"
  }
}

// used onlu if developing to s3: currently unused
def getDestUrl() {
  if (isReleaseBuild()) {
      return "s3://plensee-maven/android/releases"
  } else {
      return "s3://plensee-maven/android/snapshots"
  }
}
task sourcesJar(type: Jar, dependsOn:classes) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}
task javadocJar(type: Jar, dependsOn:javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

//task javadocJar(type: Jar, dependsOn:javadoc) {
//    archiveClassifier.set('javadoc')
//    from "$buildDir/javadoc"
// }

artifacts {
    archives javadocJar
    archives sourcesJar
}


afterEvaluate { project ->

    publishing {
        publications {
            maven(MavenPublication) {
                from components.java
                groupId GROUP_MAVEN_PUSH
                artifactId POM_ARTIFACT_ID
                version VERSION_NAME

                artifact sourcesJar
                artifact javadocJar
                pom {
                    name = POM_NAME
                    description = POM_DESCRIPTION
//                    url = 'http://www.example.com/library'
//                    properties = [
//                            myProp: "value",
//                            "prop.with.dots": "anotherValue"
//                    ]
//                    licenses {
//                        license {
//                            name = 'The Apache License, Version 2.0'
//                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
//                        }
//                    }
//                    developers {
//                        developer {
//                            id = 'johnd'
//                            name = 'John Doe'
//                            email = 'john.doe@example.com'
//                        }
//                    }
//                    scm {
//                        connection = 'scm:git:git://example.com/my-library.git'
//                        developerConnection = 'scm:git:ssh://example.com/my-library.git'
//                        url = 'http://example.com/my-library/'
//                    }

//                    def releasesRepoUrl = layout.buildDirectory.dir('repos/releases')
//                    def snapshotsRepoUrl = layout.buildDirectory.dir('repos/snapshots')
//                    url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                }

            }
        }
        repositories {
            maven {
                name = 'myRepo'
//                url = "file:///" + getOutputDir() ////can also be used to copy to local file
//                url = getDestUrl() //for copying directly to S3
                def releasesRepoUrl = layout.buildDirectory.dir('repos/releases')
                def snapshotsRepoUrl = layout.buildDirectory.dir('repos/snapshots')
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            }
        }
    }
    /*
    uploadArchives {
        repositories {
            mavenDeployer {
                repository(url: "file:///" + getOutputDir()) //can also be used to copy to local file
                //repository(url: getDestUrl()) // for copying directly to S3

                pom.groupId = GROUP_MAVEN_PUSH
                pom.artifactId = POM_ARTIFACT_ID
                pom.version = VERSION_NAME

                pom.project {
                    name POM_NAME
                    packaging POM_PACKAGING
                    description POM_DESCRIPTION
                }
            }
        }
    }
    */



    task copyToS3(type: Exec) {
        commandLine 'aws', 's3', 'cp', '--recursive', getOutputDir(), getDestUrl()
    }

    copyToS3.dependsOn publish
}